name: Manage VM Lifecycle (Create/Destroy)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Lifecycle action to perform'
        required: true
        type: choice
        options: [create, destroy]
        default: 'create'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE: us-central1-a
  VM_NAME: sql-linux-vm
  GCS_BUCKET: praxis-sql-bootstrap

jobs:
  manage-vm-lifecycle:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud
        run: |
          set -euo pipefail
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud config set compute/zone "$GCP_ZONE"

      - name: Setup Terraform
        if: github.event.inputs.action == 'create'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Execute lifecycle action (Create or Destroy)
        run: |
          set -euo pipefail
          
          # ========== CREATE VM ==========
          if [ "${{ github.event.inputs.action }}" = "create" ]; then
            echo "üöÄ Creating VM from Terraform configuration..."
            echo ""
            
            # Check if VM already exists
            if gcloud compute instances describe "$VM_NAME" --zone "$GCP_ZONE" &>/dev/null; then
              echo "‚ö†Ô∏è VM already exists!"
              STATUS=$(gcloud compute instances describe "$VM_NAME" --zone "$GCP_ZONE" --format="value(status)")
              echo "Current status: $STATUS"
              echo ""
              echo "If you want to recreate the VM:"
              echo "  1. Run this workflow with 'destroy' action first"
              echo "  2. Then run with 'create' action"
              echo ""
              echo "Or use 'Deploy SQL Server' workflow with 'restart' action"
              exit 1
            fi
            
            echo "üìã Terraform will create VM with:"
            echo "   ‚Ä¢ Name: $VM_NAME"
            echo "   ‚Ä¢ Zone: $GCP_ZONE"
            echo "   ‚Ä¢ Static IP: Existing (preserved)"
            echo "   ‚Ä¢ Persistent Disk: Existing (your data safe)"
            echo "   ‚Ä¢ Startup Script: Configured in metadata"
            echo ""
            
            # Initialize and apply Terraform
            cd infra
            terraform init -input=false
            
            # Get secrets from Secret Manager FIRST
            echo "Fetching secrets from Secret Manager..."
            SQL_SA_PASSWORD=$(gcloud secrets versions access latest --secret="sql-sa-password")
            SQL_CI_PASSWORD=$(gcloud secrets versions access latest --secret="sql-ci-password")
            
            # Create terraform.tfvars for this run BEFORE importing
            echo "Creating Terraform variables file..."
            echo "project = \"$GCP_PROJECT_ID\"" > terraform.auto.tfvars
            echo "admin_ip_cidr = \"0.0.0.0/0\"" >> terraform.auto.tfvars
            echo "sql_sa_password = \"$SQL_SA_PASSWORD\"" >> terraform.auto.tfvars
            echo "sql_admin_password = \"$SQL_CI_PASSWORD\"" >> terraform.auto.tfvars
            
            echo ""
            echo "üì¶ Importing existing resources into Terraform state..."
            
            # Import existing resources (they must exist for import to succeed)
            set +e  # Don't exit on error during imports
            
            terraform import google_compute_address.sqlvm_ip "projects/$GCP_PROJECT_ID/regions/us-central1/addresses/sqlvm-ip"
            if [ $? -eq 0 ]; then echo "  ‚úÖ IP address imported"; else echo "  ‚ÑπÔ∏è  IP address: already in state or will be created"; fi
            
            terraform import google_compute_disk.sql_data "projects/$GCP_PROJECT_ID/zones/us-central1-a/disks/sql-data-disk"
            if [ $? -eq 0 ]; then echo "  ‚úÖ Disk imported"; else echo "  ‚ÑπÔ∏è  Disk: already in state or will be created"; fi
            
            terraform import google_compute_network.vpc "projects/$GCP_PROJECT_ID/global/networks/demo-vpc"
            if [ $? -eq 0 ]; then echo "  ‚úÖ VPC imported"; else echo "  ‚ÑπÔ∏è  VPC: already in state or will be created"; fi
            
            terraform import google_compute_subnetwork.subnet "projects/$GCP_PROJECT_ID/regions/us-central1/subnetworks/demo-subnet"
            if [ $? -eq 0 ]; then echo "  ‚úÖ Subnet imported"; else echo "  ‚ÑπÔ∏è  Subnet: already in state or will be created"; fi
            
            terraform import google_service_account.vm_runtime "projects/$GCP_PROJECT_ID/serviceAccounts/vm-runtime@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ VM runtime service account imported"; else echo "  ‚ÑπÔ∏è  VM runtime service account: already in state or will be created"; fi
            
            terraform import google_service_account.github_actions "projects/$GCP_PROJECT_ID/serviceAccounts/github-actions-deployer@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ GitHub Actions service account imported"; else echo "  ‚ÑπÔ∏è  GitHub Actions service account: already in state or will be created"; fi
            
            terraform import google_compute_firewall.ssh "projects/$GCP_PROJECT_ID/global/firewalls/allow-ssh-admin"
            if [ $? -eq 0 ]; then echo "  ‚úÖ SSH firewall imported"; else echo "  ‚ÑπÔ∏è  SSH firewall: already in state or will be created"; fi
            
            terraform import google_compute_firewall.iap_ssh "projects/$GCP_PROJECT_ID/global/firewalls/allow-iap-ssh"
            if [ $? -eq 0 ]; then echo "  ‚úÖ IAP SSH firewall imported"; else echo "  ‚ÑπÔ∏è  IAP SSH firewall: already in state or will be created"; fi
            
            terraform import google_compute_firewall.sql_1433 "projects/$GCP_PROJECT_ID/global/firewalls/allow-sql-1433-admin"
            if [ $? -eq 0 ]; then echo "  ‚úÖ SQL firewall imported"; else echo "  ‚ÑπÔ∏è  SQL firewall: already in state or will be created"; fi
            
            # Import IAM bindings (format: "project-id role member")
            terraform import google_project_iam_member.vm_runtime_logging "$GCP_PROJECT_ID roles/logging.logWriter serviceAccount:vm-runtime@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ VM runtime logging IAM imported"; else echo "  ‚ÑπÔ∏è  VM runtime logging IAM: already in state or will be created"; fi
            
            terraform import google_project_iam_member.vm_runtime_monitoring "$GCP_PROJECT_ID roles/monitoring.metricWriter serviceAccount:vm-runtime@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ VM runtime monitoring IAM imported"; else echo "  ‚ÑπÔ∏è  VM runtime monitoring IAM: already in state or will be created"; fi
            
            terraform import google_project_iam_member.github_actions_instance_admin "$GCP_PROJECT_ID roles/compute.instanceAdmin.v1 serviceAccount:github-actions-deployer@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ GitHub Actions instance admin IAM imported"; else echo "  ‚ÑπÔ∏è  GitHub Actions instance admin IAM: already in state or will be created"; fi
            
            terraform import google_project_iam_member.github_actions_iap_tunnel "$GCP_PROJECT_ID roles/iap.tunnelResourceAccessor serviceAccount:github-actions-deployer@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ GitHub Actions IAP tunnel IAM imported"; else echo "  ‚ÑπÔ∏è  GitHub Actions IAP tunnel IAM: already in state or will be created"; fi
            
            terraform import google_project_iam_member.github_actions_compute_viewer "$GCP_PROJECT_ID roles/compute.viewer serviceAccount:github-actions-deployer@$GCP_PROJECT_ID.iam.gserviceaccount.com"
            if [ $? -eq 0 ]; then echo "  ‚úÖ GitHub Actions compute viewer IAM imported"; else echo "  ‚ÑπÔ∏è  GitHub Actions compute viewer IAM: already in state or will be created"; fi
            
            set -e  # Re-enable exit on error
            
            echo ""
            echo "‚úÖ Import phase complete"
            echo ""
            echo "Running terraform apply..."
            
            # Apply without -target to let Terraform manage all resources properly
            # The imports above ensure existing resources won't be recreated
            terraform apply -auto-approve
            
            echo ""
            echo "‚úÖ VM created successfully!"
            echo ""
            
            # Get VM details
            EXTERNAL_IP=$(gcloud compute instances describe "$VM_NAME" --zone "$GCP_ZONE" --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
            INTERNAL_IP=$(gcloud compute instances describe "$VM_NAME" --zone "$GCP_ZONE" --format="get(networkInterfaces[0].networkIP)")
            
            echo "üîß VM Details:"
            echo "   Name: $VM_NAME"
            echo "   External IP: $EXTERNAL_IP"
            echo "   Internal IP: $INTERNAL_IP"
            echo "   Zone: $GCP_ZONE"
            echo ""
            echo "‚è≥ Next Steps:"
            echo "   1. Startup script is running automatically (wait ~2-3 minutes)"
            echo "   2. SQL Server will be deployed"
            echo "   3. Database will be initialized"
            echo ""
            echo "To verify deployment:"
            echo "   Run 'Deploy SQL Server' workflow with 'deploy' action"
            echo ""
            echo "To get connection strings:"
            echo "   Run 'Get Connection Info' workflow"
            
            exit 0
          fi
          
          # ========== DESTROY VM ==========
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            echo "üí£ Destroying VM..."
            echo ""
            echo "‚ö†Ô∏è  WARNING: This will DELETE the VM instance"
            echo ""
            echo "‚úÖ These will be PRESERVED:"
            echo "   ‚Ä¢ Static IP address (sqlvm-ip)"
            echo "   ‚Ä¢ Persistent disk (sql-data-disk) - ALL YOUR DATA"
            echo "   ‚Ä¢ VPC network and subnets"
            echo "   ‚Ä¢ Firewall rules"
            echo "   ‚Ä¢ Service accounts"
            echo "   ‚Ä¢ Secret Manager secrets"
            echo "   ‚Ä¢ GCS bucket"
            echo ""
            
            # Check if VM exists
            if ! gcloud compute instances describe "$VM_NAME" --zone "$GCP_ZONE" &>/dev/null; then
              echo "‚ö†Ô∏è VM does not exist (already destroyed)"
              echo ""
              echo "To create it again:"
              echo "   Run this workflow with 'create' action"
              exit 0
            fi
            
            # Get current VM status
            VM_STATUS=$(gcloud compute instances describe "$VM_NAME" --zone "$GCP_ZONE" --format="value(status)")
            echo "Current VM status: $VM_STATUS"
            echo ""
            
            # Stop VM first if it's running (cleaner shutdown)
            if [ "$VM_STATUS" = "RUNNING" ]; then
              echo "Stopping VM gracefully before deletion..."
              gcloud compute instances stop "$VM_NAME" --zone "$GCP_ZONE"
              echo "‚úÖ VM stopped"
              echo ""
              
              # Wait a moment for graceful shutdown
              sleep 5
            elif [ "$VM_STATUS" = "STOPPING" ]; then
              echo "VM is already stopping, waiting..."
              sleep 10
            elif [ "$VM_STATUS" = "TERMINATED" ]; then
              echo "‚úÖ VM is already stopped (TERMINATED state)"
              echo "Proceeding directly to deletion..."
              echo ""
            fi
            
            # Delete the VM
            echo "Deleting VM instance..."
            gcloud compute instances delete "$VM_NAME" \
              --zone "$GCP_ZONE" \
              --quiet
            
            echo ""
            echo "‚úÖ VM destroyed successfully!"
            echo ""
            echo "üí∞ COST SAVINGS:"
            echo "   ‚Ä¢ Compute (e2-standard-2): ~\$14/month ‚Üí \$0"
            echo "   ‚Ä¢ Persistent disk: ~\$2/month (still charged, keeps your data)"
            echo "   ‚Ä¢ Static IP: ~\$1.50/month (still charged, keeps your IP)"
            echo "   ‚Ä¢ Total monthly savings: ~\$14/month (~80% reduction)"
            echo ""
            echo "üîß To recreate the VM:"
            echo "   1. Run this workflow with 'create' action"
            echo "   2. Same IP address will be used"
            echo "   3. Same data disk will be attached"
            echo "   4. SQL Server will deploy automatically"
            echo ""
            
            exit 0
          fi

      - name: Show next steps
        if: always()
        run: |
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "Available Workflows:"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "1. Manage VM Lifecycle (THIS WORKFLOW)"
          echo "   ‚Üí Create or destroy the VM instance"
          echo ""
          echo "2. Deploy SQL Server"
          echo "   ‚Üí Deploy, restart, or stop running VM"
          echo ""
          echo "3. Get Connection Info"
          echo "   ‚Üí Fetch current IP and connection strings"
          echo ""
