name: Deploy SQL Server to GCP

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options: [deploy, restart, stop]
        default: 'deploy'
  push:
    branches: [ main ]
    paths:
      - 'infra/scripts/init-database.sql'
      - '.github/workflows/deploy-sql.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE: us-central1-a
  VM_NAME: sql-linux-vm
  CONTAINER_NAME: mssql
  SQL_VERSION: "2022-latest"
  CLOUDSDK_CORE_DISABLE_PROMPTS: "1"  # Auto-answer yes to all prompts

jobs:
  deploy-sql-server:
    runs-on: ubuntu-latest

    # Ensure every `run:` uses bash (prevents "near `('" errors)
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # (Consider switching to OIDC/WIF later; this keeps your current SA key)
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud
        run: |
          set -euo pipefail
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud config set compute/zone "$GCP_ZONE"
          echo "=== Authenticated as: ==="
          gcloud auth list
          echo ""
          echo "=== VM Status / OS Login: ==="
          gcloud compute instances describe "$VM_NAME" \
            --format="value(status,metadata.items[key='enable-oslogin'].value)"

      - name: Test SSH Connection (IAP)
        run: |
          set -euo pipefail
          echo "=== Testing IAP SSH Connection ==="
          gcloud compute ssh "$VM_NAME" --tunnel-through-iap --command "echo 'SSH connection successful!'"

      - name: Deploy or Manage SQL Server Container
        env:
          SA_PASSWORD: ${{ secrets.SQL_SA_PASSWORD }}
          CI_PASSWORD: ${{ secrets.SQL_CI_PASSWORD }}
          ACTION: ${{ github.event.inputs.action || 'deploy' }}
        run: |
          set -euo pipefail
          echo "=== Action: $ACTION ==="

          if [ "$ACTION" = "stop" ]; then
            gcloud compute ssh "$VM_NAME" --tunnel-through-iap --command "sudo docker stop $CONTAINER_NAME || true"
            exit 0
          fi

          if [ "$ACTION" = "restart" ]; then
            gcloud compute ssh "$VM_NAME" --tunnel-through-iap --command "sudo docker restart $CONTAINER_NAME"
            exit 0
          fi

          # ---- Build a small, self-contained script on the VM and execute it ----
          gcloud compute ssh "$VM_NAME" --tunnel-through-iap -- bash -lc "cat > /tmp/deploy_sql.sh <<'VM_SCRIPT'
          #!/usr/bin/env bash
          set -euo pipefail

          CONTAINER_NAME='$CONTAINER_NAME'
          SQL_VERSION='$SQL_VERSION'
          SA_PASSWORD_PLACEHOLDER='\${SA_PASSWORD}'
          CI_PASSWORD_PLACEHOLDER='\${CI_PASSWORD}'

          echo 'Pulling SQL Server image...'
          sudo docker pull mcr.microsoft.com/mssql/server:\${SQL_VERSION}

          echo 'Fixing /mnt/sqldata permissions...'
          sudo chown -R 10001:0 /mnt/sqldata || true
          sudo chmod -R 770 /mnt/sqldata || true

          echo 'Removing any existing container...'
          sudo docker rm -f \"\${CONTAINER_NAME}\" 2>/dev/null || true

          echo 'Starting new SQL Server container...'
          sudo docker run -d \
            --name \"\${CONTAINER_NAME}\" \
            --hostname sqlserver \
            --restart unless-stopped \
            -e ACCEPT_EULA=Y \
            -e MSSQL_PID=Developer \
            -e MSSQL_SA_PASSWORD=\"\${SA_PASSWORD_PLACEHOLDER}\" \
            -p 1433:1433 \
            -v /mnt/sqldata:/var/opt/mssql \
            mcr.microsoft.com/mssql/server:\${SQL_VERSION}

          echo 'Waiting for SQL Server to become healthy (max 5 minutes)...'
          for i in {1..60}; do
            # Inspect health if available
            STATUS=\$(sudo docker inspect -f '{{.State.Health.Status}}' \"\${CONTAINER_NAME}\" 2>/dev/null || echo unknown)
            if [ \"\${STATUS}\" = \"healthy\" ]; then
              echo \"✅ SQL Server is healthy!\"
              break
            fi

            # Fallback connectivity probe
            if sudo docker exec \"\${CONTAINER_NAME}\" /opt/mssql-tools18/bin/sqlcmd \
                -S localhost -U SA -P \"\${SA_PASSWORD_PLACEHOLDER}\" -C -Q 'SELECT 1' >/dev/null 2>&1; then
              echo \"✅ SQL Server is responding!\"
              break
            fi

            if [ \"\$i\" -eq 60 ]; then
              echo \"❌ SQL Server not healthy after 5 minutes. Recent logs:\"
              sudo docker logs --tail=200 \"\${CONTAINER_NAME}\" || true
              exit 1
            fi

            echo \"Waiting... (\$i/60)\"
            sleep 5
          done

          echo 'Copying init script into container and fixing perms...'
          sudo docker cp /tmp/init-database.sql \"\${CONTAINER_NAME}\":/tmp/init-database.sql
          sudo docker exec \"\${CONTAINER_NAME}\" chown 10001:0 /tmp/init-database.sql
          sudo docker exec \"\${CONTAINER_NAME}\" chmod 640 /tmp/init-database.sql

          echo 'Running database initialization (idempotent)...'
          sudo docker exec \"\${CONTAINER_NAME}\" /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U SA -P \"\${SA_PASSWORD_PLACEHOLDER}\" -C -b \
            -v CI_PASSWORD=\"\${CI_PASSWORD_PLACEHOLDER}\" \
            -v VERSION=\"\$(date +%Y%m%d-%H%M%S)\" \
            -i /tmp/init-database.sql

          echo 'Verifying deployment...'
          sudo docker exec \"\${CONTAINER_NAME}\" /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U SA -P \"\${SA_PASSWORD_PLACEHOLDER}\" -C \
            -Q \"SELECT name, database_id, create_date FROM sys.databases WHERE name = N'DemoDB';
                SELECT name, type_desc FROM sys.database_principals WHERE name = N'ci_user';\"

          echo '=== Container status ==='
          sudo docker ps --filter name=\"\${CONTAINER_NAME}\" --format '{{.Status}}'
          VM_SCRIPT
          chmod +x /tmp/deploy_sql.sh"

          echo "=== Copy init script to VM ==="
          gcloud compute scp infra/scripts/init-database.sql "$VM_NAME":/tmp/init-database.sql --tunnel-through-iap

          echo "=== Execute deploy script on VM (inject secrets safely) ==="
          # Replace placeholders *on the VM* to avoid YAML quoting issues
          gcloud compute ssh "$VM_NAME" --tunnel-through-iap -- bash -lc "
            sed -i \"s|\\\${SA_PASSWORD}|${SA_PASSWORD}|g\" /tmp/deploy_sql.sh
            sed -i \"s|\\\${CI_PASSWORD}|${CI_PASSWORD}|g\" /tmp/deploy_sql.sh
            sudo /tmp/deploy_sql.sh
          "

          echo ""
          echo "=== ✅ Deployment complete! ==="
          echo "SQL Server 2022 is running on VM: $VM_NAME"
          echo "Connect via: 34.57.37.222,1433"
          echo "Database: DemoDB"
          echo "User: ci_user"

      - name: Clean up
        if: always()
        run: |
          set -euo pipefail
          gcloud compute ssh "$VM_NAME" --tunnel-through-iap \
            --command "sudo docker exec $CONTAINER_NAME rm -f /tmp/init-database.sql" || true
          gcloud compute ssh "$VM_NAME" --tunnel-through-iap \
            --command "rm -f /tmp/init-database.sql" || true
