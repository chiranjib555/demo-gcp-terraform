name: Deploy SQL Server to GCP

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - deploy
          - restart
          - stop
        default: 'deploy'
  push:
    branches:
      - main
    paths:
      - 'infra/scripts/init-database.sql'
      - '.github/workflows/deploy-sql.yml'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE: us-central1-a
  VM_NAME: sql-linux-vm
  CONTAINER_NAME: mssql
  SQL_VERSION: "2022-latest"
  CLOUDSDK_CORE_DISABLE_PROMPTS: "1"  # Auto-answer yes to all prompts

jobs:
  deploy-sql-server:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud
        run: |
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud config set compute/zone "$GCP_ZONE"
          
          echo "=== Authenticated as: ==="
          gcloud auth list
          
          echo ""
          echo "=== VM Status: ==="
          gcloud compute instances describe $VM_NAME --format="value(status,metadata.items[key='enable-oslogin'].value)"

      - name: Test SSH Connection
        run: |
          echo "=== Testing IAP SSH Connection ==="
          gcloud compute ssh $VM_NAME \
            --tunnel-through-iap \
            --command "echo 'SSH connection successful!'"

      - name: Deploy or Manage SQL Server Container
        env:
          SA_PASSWORD: ${{ secrets.SQL_SA_PASSWORD }}
          CI_PASSWORD: ${{ secrets.SQL_CI_PASSWORD }}
          ACTION: ${{ github.event.inputs.action || 'deploy' }}
        run: |
          set -euo pipefail
          
          echo "=== Action: $ACTION ==="
          
          # Copy init script to VM first (if exists)
          if [ -f infra/scripts/init-database.sql ]; then
            echo "=== Copying initialization script to VM ==="
            gcloud compute scp infra/scripts/init-database.sql $VM_NAME:/tmp/init-database.sql \
              --tunnel-through-iap
          fi
          
          # Copy remote deployment script to VM
          echo "=== Copying remote deployment script to VM ==="
          gcloud compute scp infra/scripts/remote-deploy.sh $VM_NAME:/tmp/remote-deploy.sh \
            --tunnel-through-iap
          
          # Execute remote script on VM (passes secrets as arguments)
          echo "=== Running deployment on VM ==="
          gcloud compute ssh $VM_NAME --tunnel-through-iap \
            --command "chmod +x /tmp/remote-deploy.sh && sudo /tmp/remote-deploy.sh '$ACTION' '$SA_PASSWORD' '$CI_PASSWORD' '$CONTAINER_NAME' '$SQL_VERSION'"
          
          echo ""
          echo "=== âœ… Deployment complete! ==="
          echo "SQL Server 2022 is running on VM: $VM_NAME"
          echo "Connect via: 34.57.37.222,1433"
          echo "Database: DemoDB"
          echo "User: ci_user"

      - name: Clean up
        if: always()
        run: |
          # Remove scripts from container
          gcloud compute ssh $VM_NAME --tunnel-through-iap \
            --command "sudo docker exec $CONTAINER_NAME rm -f /tmp/init-database.sql 2>/dev/null" || true
          
          # Remove scripts from VM
          gcloud compute ssh $VM_NAME --tunnel-through-iap \
            --command "rm -f /tmp/init-database.sql /tmp/remote-deploy.sh" || true
