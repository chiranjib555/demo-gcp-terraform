name: Deploy SQL Server (Startup Script Pattern)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options: [deploy, restart, stop]
        default: 'deploy'
  push:
    branches: [ main ]
    paths:
      - 'infra/scripts/init-database.sql'
      - 'scripts/vm-startup.sh'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE: us-central1-a
  VM_NAME: sql-linux-vm
  CONTAINER_NAME: mssql
  GCS_BUCKET: praxis-sql-bootstrap

jobs:
  deploy-sql-server:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud
        run: |
          set -euo pipefail
          gcloud config set project "$GCP_PROJECT_ID"
          gcloud config set compute/zone "$GCP_ZONE"

      - name: Handle VM actions (stop/restart)
        if: github.event.inputs.action == 'stop' || github.event.inputs.action == 'restart'
        run: |
          set -euo pipefail
          
          # ========== STOP VM ==========
          if [ "${{ github.event.inputs.action }}" = "stop" ]; then
            echo "üõë Stopping VM..."
            gcloud compute instances stop "$VM_NAME" --zone "$GCP_ZONE"
            echo "‚úÖ VM stopped (saves compute costs, keeps disk)"
            exit 0
          fi
          
          # ========== RESTART VM ==========
          if [ "${{ github.event.inputs.action }}" = "restart" ]; then
            echo "üîç Checking VM status..."
            STATUS=$(gcloud compute instances describe "$VM_NAME" \
              --zone "$GCP_ZONE" \
              --format="value(status)" 2>/dev/null || echo "NOT_FOUND")
            
            echo "Current VM status: $STATUS"
            
            if [ "$STATUS" = "NOT_FOUND" ]; then
              echo "‚ùå VM does not exist. Use 'create' action first."
              exit 1
            elif [ "$STATUS" = "RUNNING" ]; then
              echo "VM is running, performing reset..."
              gcloud compute instances reset "$VM_NAME" --zone "$GCP_ZONE"
              echo "‚úÖ VM restarted, startup script will run automatically"
            elif [ "$STATUS" = "TERMINATED" ]; then
              echo "VM is stopped, starting it..."
              gcloud compute instances start "$VM_NAME" --zone "$GCP_ZONE"
              echo "‚úÖ VM started, startup script will run automatically"
            else
              echo "‚ö†Ô∏è VM is in $STATUS state. Waiting for it to be ready..."
              echo "Please try again in a moment."
              exit 1
            fi
            exit 0
          fi

      - name: Upload SQL init script to GCS
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == ''
        run: |
          set -euo pipefail
          echo "=== Uploading init-database.sql to GCS ==="
          gsutil cp infra/scripts/init-database.sql "gs://${GCS_BUCKET}/init-database.sql"
          echo "‚úÖ SQL file uploaded"
          
          echo ""
          echo "=== Uploading connection info script to GCS ==="
          gsutil cp scripts/get-connection-info-cloud.sh "gs://${GCS_BUCKET}/get-connection-info-cloud.sh"
          gsutil acl ch -u AllUsers:R "gs://${GCS_BUCKET}/get-connection-info-cloud.sh"
          echo "‚úÖ Connection info script uploaded"
          
          echo ""
          echo "üìù To get connection info from anywhere:"
          echo "   Open Cloud Shell: https://console.cloud.google.com"
          echo "   Run: curl -s https://storage.googleapis.com/${GCS_BUCKET}/get-connection-info-cloud.sh | bash"

      - name: Deploy SQL Server via SSH
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == ''
        run: |
          set -euo pipefail
          echo "=== Deploying SQL Server via SSH ==="
          
          # Copy the deployment script to the VM
          gcloud compute scp scripts/vm-startup.sh "$VM_NAME:/tmp/deploy-sql.sh" \
            --zone "$GCP_ZONE" \
            --tunnel-through-iap
          
          # Execute the deployment script
          gcloud compute ssh "$VM_NAME" \
            --zone "$GCP_ZONE" \
            --tunnel-through-iap \
            --command "sudo bash /tmp/deploy-sql.sh"
          
          echo "‚úÖ SQL Server deployment completed"

      - name: Wait for VM to be ready
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == ''
        run: |
          set -euo pipefail
          echo "=== Waiting for SQL Server to be ready ==="
          
          # Give SQL Server container time to start and initialize
          echo "Waiting for SQL Server startup (this takes ~60-90 seconds)..."
          sleep 60
          
          # Check if container is running and SQL Server is accepting connections
          for i in {1..20}; do
            # Check if container is running
            CONTAINER_STATUS=$(gcloud compute ssh "$VM_NAME" \
                --zone "$GCP_ZONE" \
                --tunnel-through-iap \
                --command "sudo docker inspect -f '{{.State.Status}}' $CONTAINER_NAME 2>/dev/null" 2>/dev/null || echo "not_found")
            
            if [ "$CONTAINER_STATUS" = "running" ]; then
              echo "‚úÖ SQL Server container is running!"
              
              # Give it a bit more time for SQL Server to fully start
              sleep 10
              
              # Check SQL Server logs for "SQL Server is now ready for client connections"
              if gcloud compute ssh "$VM_NAME" \
                  --zone "$GCP_ZONE" \
                  --tunnel-through-iap \
                  --command "sudo docker logs $CONTAINER_NAME 2>&1 | grep -q 'SQL Server is now ready for client connections'" 2>/dev/null; then
                echo "‚úÖ SQL Server is ready for connections!"
                break
              fi
            fi
            
            if [ $i -eq 20 ]; then
              echo "‚ö†Ô∏è  SQL Server may still be starting. Showing recent logs..."
              gcloud compute ssh "$VM_NAME" \
                --zone "$GCP_ZONE" \
                --tunnel-through-iap \
                --command "sudo docker logs $CONTAINER_NAME --tail 30"
            fi
            
            echo "Waiting for SQL Server to be ready... ($i/20)"
            sleep 10
          done

      - name: Verify deployment
        if: github.event.inputs.action == 'deploy' || github.event.inputs.action == ''
        run: |
          set -euo pipefail
          echo "=== Verifying Deployment ==="
          
          # First, wait for Docker to be installed (startup script might still be running)
          echo "Checking if Docker is installed..."
          for i in {1..20}; do
            if gcloud compute ssh "$VM_NAME" \
                --zone "$GCP_ZONE" \
                --tunnel-through-iap \
                --command "command -v docker >/dev/null 2>&1" 2>/dev/null; then
              echo "‚úÖ Docker is installed"
              break
            fi
            
            if [ $i -eq 20 ]; then
              echo "‚ö†Ô∏è  Docker not found after 2 minutes. Startup script may have failed."
              echo "Showing startup script logs:"
              gcloud compute instances get-serial-port-output "$VM_NAME" \
                --zone "$GCP_ZONE" | grep -A 100 "startup-script" || true
              exit 1
            fi
            
            echo "Waiting for Docker installation... ($i/20)"
            sleep 6
          done
          
          # Now check Docker containers
          echo ""
          echo "Checking Docker containers..."
          gcloud compute ssh "$VM_NAME" \
            --zone "$GCP_ZONE" \
            --tunnel-through-iap \
            --command "sudo docker ps --filter name=$CONTAINER_NAME --format 'Container: {{.Names}} | Status: {{.Status}} | Ports: {{.Ports}}'"
          
          echo ""
          echo "=== ‚úÖ Deployment Complete ==="
          echo "SQL Server 2022 is running on VM: $VM_NAME"
          echo "Connect via: External IP (get from 'Get Connection Info' workflow)"
          echo "Database: DemoDB"
          echo "User: ci_user"
          echo ""
          echo "To view full startup script logs:"
          echo "  gcloud compute instances get-serial-port-output $VM_NAME --zone $GCP_ZONE | grep startup-script"

      - name: Show startup script logs (on failure)
        if: failure()
        run: |
          echo "=== Startup Script Logs ==="
          gcloud compute instances get-serial-port-output "$VM_NAME" \
            --zone "$GCP_ZONE" | grep -A 100 "startup-script" || true
