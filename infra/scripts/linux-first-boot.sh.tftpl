#!/usr/bin/env bash# Installs Docker, runs SQL Server 2022 (Linux, Developer) in a container,# opens 1433, creates DB + CI login. Idempotent.set -euo pipefail# ---------- Inputs from Terraform ----------SQL_SA_PASSWORD='${sql_sa_password}'   # strong SA password for containerDB_NAME='${db_name}'                    # e.g., DemoDBCI_LOGIN='${sql_login}'                 # e.g., ci_userCI_PASSWORD='${sql_password}'           # strong password# ------------------------------------------log() { echo "[startup] $*"; }# Update & base depslog "Updating apt and installing prerequisites…"export DEBIAN_FRONTEND=noninteractiveapt-get update -yapt-get install -y ca-certificates curl gnupg lsb-release# Install Docker (official repo)log "Installing Docker CE…"install -m 0755 -d /etc/apt/keyringscurl -fsSL https://download.docker.com/linux/ubuntu/gpg \  | gpg --dearmor -o /etc/apt/keyrings/docker.gpgchmod a+r /etc/apt/keyrings/docker.gpg. /etc/os-releaseecho "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \https://download.docker.com/linux/ubuntu $${VERSION_CODENAME} stable" \> /etc/apt/sources.list.d/docker.listapt-get update -yapt-get install -y docker-ce docker-ce-cli containerd.iosystemctl enable dockersystemctl start docker# Persist SQL datamkdir -p /var/opt/mssqlchmod 700 /var/opt/mssql# Pull SQL Server 2022 imagelog "Pulling SQL Server 2022 Linux image…"docker pull mcr.microsoft.com/mssql/server:2022-latest# Launch container if not runningif ! docker ps --format '{{.Names}}' | grep -q '^mssql$$'; then  log "Starting SQL Server container…"  docker run -d --name mssql \    --restart unless-stopped \    -e "ACCEPT_EULA=Y" \    -e "MSSQL_PID=Developer" \    -e "MSSQL_SA_PASSWORD=$${SQL_SA_PASSWORD}" \    -p 1433:1433 \    -v /var/opt/mssql:/var/opt/mssql \    mcr.microsoft.com/mssql/server:2022-latestelse  log "Container 'mssql' already running. Skipping start."fi# Wait for SQL to be readylog "Waiting for SQL Server readiness…"for i in {1..60}; do  if docker exec mssql /opt/mssql-tools18/bin/sqlcmd -S localhost -C \      -U SA -P "$${SQL_SA_PASSWORD}" -Q "SELECT 1" >/dev/null 2>&1; then    log "SQL Server is ready."    break  fi  sleep 2  if [ "$$i" -eq 60 ]; then    log "SQL Server did not become ready in time."    exit 1  fidone# Helper for sqlcmd in containerrun_sql () {  docker exec mssql /opt/mssql-tools18/bin/sqlcmd \    -S localhost -C -U SA -P "$${SQL_SA_PASSWORD}" -b -Q "$$1"}# Create DB (idempotent)log "Ensuring database '$${DB_NAME}' exists…"run_sql "IF DB_ID('$${DB_NAME}') IS NULL CREATE DATABASE [$${DB_NAME}];"# Create CI login + DB user with db_owner (idempotent; tighten later)log "Ensuring CI login '$${CI_LOGIN}' exists…"run_sql "IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name = N'$${CI_LOGIN}')BEGIN CREATE LOGIN [$${CI_LOGIN}] WITH PASSWORD=N'$${CI_PASSWORD}', CHECK_POLICY=OFF; END;"log "Ensuring DB user for '$${CI_LOGIN}' exists with db_owner…"run_sql "USE [$${DB_NAME}];IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = N'$${CI_LOGIN}')BEGIN CREATE USER [$${CI_LOGIN}] FOR LOGIN [$${CI_LOGIN}]; END;EXEC sp_addrolemember N'db_owner', N'$${CI_LOGIN}';"log "Startup completed."