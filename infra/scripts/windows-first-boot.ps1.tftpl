# Enable TCP/IP for SQL Server, open firewall, set Mixed Mode, and create a CI user
# Image: SQL Server Express on Windows Server (GCP public image)

$ErrorActionPreference = "Stop"

# 1) Ensure SQL Server services are present
$svc = Get-Service -Name 'MSSQL*' | Sort-Object -Property Name
if (-not $svc) {
  Write-Host "No MSSQL services found. Exiting."
  exit 1
}

# 2) Enable TCP/IP (SQL Server Network Configuration)
# Uses SQLPS/SMO WMI provider
Import-Module "SQLPS" -DisableNameChecking -ErrorAction SilentlyContinue

# Default instance name for SQL Express on these images is usually 'MSSQLSERVER'
# Protocol config path:
$wmi = New-Object ('Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer')
$tcp = $wmi.GetSmoObject("ManagedComputer[@Name='$env:COMPUTERNAME']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Tcp']")

if ($null -eq $tcp) {
  Write-Host "Unable to find TCP protocol for MSSQLSERVER; trying SQLEXPRESS"
  $tcp = $wmi.GetSmoObject("ManagedComputer[@Name='$env:COMPUTERNAME']/ServerInstance[@Name='SQLEXPRESS']/ServerProtocol[@Name='Tcp']")
}

if ($tcp -ne $null) {
  $tcp.IsEnabled = $true
  $tcp.Alter()

  # Force port 1433 on IPv4
  foreach ($ip in $tcp.IPAddresses) {
    if ($ip.Name -like "IPAll") {
      $ip.IPAddressProperties["TcpDynamicPorts"].Value = ""
      $ip.IPAddressProperties["TcpPort"].Value = "1433"
    }
  }
  $tcp.Alter()
} else {
  Write-Host "Could not adjust TCP protocol. Continuing."
}

# 3) Open Windows Firewall for TCP 1433 (in case not present)
Try {
  if (-not (Get-NetFirewallRule -DisplayName "Allow SQL 1433" -ErrorAction SilentlyContinue)) {
    New-NetFirewallRule -DisplayName "Allow SQL 1433" -Direction Inbound -Protocol TCP -LocalPort 1433 -Action Allow
  }
} Catch {
  # Fallback on older images
  netsh advfirewall firewall add rule name="Allow SQL 1433" dir=in action=allow protocol=TCP localport=1433
}

# 4) Switch to Mixed Mode and create a dedicated SQL login
# Use sqlcmd; default instance: localhost
$SqlLogin = "${sql_login}"
$SqlPassword = "${sql_password}"

# Enable mixed mode by flipping registry and restarting services
# HKLM\Software\Microsoft\Microsoft SQL Server\MSSQL.*\MSSQLServer\LoginMode = 2 (Mixed)
$instances = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server" | Where-Object {$_.PSChildName -like "MSSQL*"}
foreach ($inst in $instances) {
  $path = "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\{0}\MSSQLServer" -f $inst.PSChildName
  Try {
    Set-ItemProperty -Path $path -Name "LoginMode" -Value 2 -ErrorAction Stop
  } Catch { }
}

# Restart SQL services
Get-Service -Name 'MSSQL*' | ForEach-Object {
  Try { Restart-Service -Name $_.Name -Force -ErrorAction Stop } Catch { }
}

# Wait a bit for restart
Start-Sleep -Seconds 10

# Create login & grant sysadmin (demo only â€” scope down in prod)
$createLogin = @"
IF NOT EXISTS (SELECT name FROM sys.sql_logins WHERE name = N'$SqlLogin')
BEGIN
  CREATE LOGIN [$SqlLogin] WITH PASSWORD=N'$SqlPassword', CHECK_POLICY=OFF;
END;
ALTER SERVER ROLE [sysadmin] ADD MEMBER [$SqlLogin];
"@

# Try default instance first, then .\SQLEXPRESS
$invocations = @(
  'sqlcmd -S localhost -E -Q',
  'sqlcmd -S .\SQLEXPRESS -E -Q'
)

$success = $false
foreach ($cmd in $invocations) {
  Try {
    Invoke-Expression "$cmd `"$createLogin`""
    $success = $true
    break
  } Catch {
    Start-Sleep -Seconds 3
  }
}

if (-not $success) {
  Write-Host "Failed to configure SQL login via sqlcmd; you may need to RDP and run manually."
}

Write-Host "Startup configuration complete."
